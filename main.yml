---
- hosts: localhost
  vars_files: params.yml
  tasks:
  - name: insert a new LAN VM block
    blockinfile:
        block: |
           resource "nutanix_virtual_machine" "{{ item.key }}" {
                   name                 = "{{ item.value.name }}"
                   description          = "{{ item.value.descr }}" 
                   provider             = {{ item.value.datacenter }}
                   cluster_uuid         = data.nutanix_cluster.{{ item.value.cluster }}.metadata.uuid
                   num_vcpus_per_socket = "{{ item.value.cpu_socket }}"
                   num_sockets          = "{{ item.value.cpu }}"
                   memory_size_mib      = "{{ item.value.mem }}"
                   boot_type            = "UEFI"
                   nic_list {
                     subnet_uuid = {{ item.value.subnet }}
                    }

                   disk_list {
                     data_source_reference = {
                        kind = "image"
                        uuid = data.nutanix_image.{{ item.value.image }}.metadata.uuid
                     }

                     device_properties {
                       disk_address = {
                         device_index = 0
                         adapter_type = "SCSI"
                       }
                       device_type = "DISK"
                     }
                   }

                   disk_list {
                     disk_size_mib = ({{ item.value.disk2_size_gb }} * 1024)
                     storage_config {
                       storage_container_reference {
                         kind = "storage_container"
                         uuid = {{ item.value.storage }}
                       }
                     }
                   }

                   guest_customization_cloud_init_user_data = base64encode(templatefile("user-data.tpl", {
                     vm_domain         =  var.vm_domain 
                     vm_name       =  "{{ item.value.hostname }}"
                     vm_ip   = "{{ item.value.ip }}"
                     vm_prefix = "{{ item.value.net_prefix }}"
                     vm_gateway   =  "{{ item.value.gw }}"
                     vm_dns1    = var.vm_dns1
                     vm_dns2    = var.vm_dns2
                     vm_user = var.vm_user
                     vm_public_key = var.public_key
                   }))

                  #  provisioner "local-exec" {
                  #  command = " ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i '{{ item.value.hostname }},' -e env={{ item.value.satellite_env }} config.yml -u ${var.vm_user} -b --vault-password-file {{ lookup('env','ANSIBLE_VAULT') }}/.vault_password_file" 
                  #  }
            }
        path: main.tf
        marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.key|upper }}"
    loop: "{{ q('dict',lan_vms) }}"
    when: lan_vms is defined 
  - name: insert a new DMZ VM   
    blockinfile:
      block: | 
        resource "vsphere_virtual_machine" "{{ item.key|upper }}" {
          resource_pool_id     = data.vsphere_resource_pool.{{ item.value.resource_pool }}.id
          host_system_id       = data.vsphere_host.{{ item.value.host }}.id 
          datastore_id         = data.vsphere_datastore.{{ item.value.datastore }}.id 
          firmware             = "efi"
          name                 = "{{ item.value.name }}" 
          folder               = "{{ item.value.folder }}"
          num_cpus             = "{{ item.value.cpu }}"
          memory               = "{{ item.value.mem }}"
          wait_for_guest_net_timeout = 5
          disk {
            label            = "disk0"
            size             = 50
            controller_type  = "scsi"
          }
          disk {
            label            = "disk1"
            size             = {{ item.value.disk2_size_gb }}
            controller_type  = "scsi"
            unit_number      = 1
          }
          cdrom {
          }

          clone {
            template_uuid = data.vsphere_content_library_item.{{ item.value.content_library_item }}.id
            customize {
              linux_options {
              host_name = "{{ item.value.hostname }}"
              domain    = var.vm_domain
              }
            
            # Nécessaire malgré la config nmcli via le prov remote-exec car justement remote-exec a besoin d'une IP pour se connecter  
              network_interface {
                ipv4_address = cidrhost("{{ item.value.subnet }}","{{ item.value.vm_ip_last_octet }}") 
                ipv4_netmask = "{{ item.value.net_prefix }}"
              }
              ipv4_gateway = cidrhost("{{ item.value.subnet }}","{{ item.value.gw_ip_last_octet }}")
              dns_server_list = [var.vm_dns1,var.vm_dns2]
            }
          }        
          network_interface {
            network_id = data.vsphere_network.{{ item.value.network }}.id
          }

          provisioner "file" {
            source = var.public_key_path
            destination = "/tmp/authorized_keys"
            connection {
              type = "ssh"
              user = var.vm_user
              password = var.vm_password
              host = "{{ item.value.hostname }}"
            }
          }  
  
          provisioner "remote-exec" {
            inline = [
              "mkdir /home/localadmin/.ssh",
               "chmod 0700 /home/localadmin/.ssh",
               "mv /tmp/authorized_keys /home/localadmin/.ssh/",
               "chmod 0600 /home/localadmin/.ssh/authorized_keys",      
               "sudo nmcli con mod 'System ${var.vsphere_interface_name}' ipv4.method manual ipv4.addresses {{ item.value.ip }}/24 ipv4.gateway {{ item.value.gw }} connection.autoconnect yes",
               "sudo nmcli con mod 'System ${var.vsphere_interface_name}' con-name ${var.vsphere_interface_name}",
               "sudo nmcli con up ${var.vsphere_interface_name}",
               "sudo dnf -y remove cloud-init"      
            ]
            connection {
               type = "ssh"
               user = "localadmin"
               password = var.vm_password
               host = "{{ item.value.hostname }}"
            }
          }
  
          provisioner "local-exec" {
            command = " ANSIBLE_HOST_KEY_CHECKING=False ansible-playbook -i '{{ item.value.hostname }},' -e env={{ item.value.satellite_env }} config.yml -u ${var.vm_user} -b --vault-password-file {{ lookup('env','ANSIBLE_VAULT') }}/.vault_password_file"
          }

        }
      path: main.tf  
      marker: "# {mark} ANSIBLE MANAGED BLOCK {{ item.key|upper }} (DMZ)"
    loop: "{{ q('dict',dmz_vms) }}"
    when: dmz_vms is defined 


