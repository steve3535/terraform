stages:
  - parse_trigger #dummy stage to trigger the pipe
  - parse_convert_to_csv 
  - parse_convert_to_yml 
  - ansible
#   - tf_check
#   - tf_apply
  
first_job:
    stage: parse_trigger 
    script:
      - echo "Detected useful changes, starting ..."      
    tags:
      - shell
    rules:
    - changes:
        - "vmdefs.xlsx" #if change happens here, the pipeline is triggered 
      
parse_job_1:
    before_script:
      - https_proxy=172.22.108.7:80 pip3 install -r requirements.txt 
    stage: parse_convert_to_csv 
    script:
      - python3 convert_to_csv.py
      #- cat vmdefs.csv 
      - cp vmdefs.csv /opt/iac/terraform/
    artifacts:
      untracked: true
      paths:
      - vmdefs.csv 
    tags:
      - shell
    
parse_job_2:
    stage: parse_convert_to_yml
    dependencies:
      - parse_job_1
    before_script:
      #- cat vmdefs.csv
    script:
      - python3 convert_to_yml.py vmdefs.csv
      - cp params.yml /opt/iac/terraform/
    artifacts:
      untracked: true      
      paths:
      - params.yml
    tags:
      - shell
  
       
ansible_playbook_generation:
    stage: ansible 
    script:
      #- cat params.yml 
      - ansible-playbook main.yml 
      - cp main.yml /opt/iac/terraform/
    artifacts:
      paths:
      - main.tf 

# terraform_check:
#     stage: tf_check
#     script:
#       - cat main.tf 
#       - terraform validate
#       - terraform plan --var-file=/opt/infrastructure-linux/terraform/dev/.infra.tfvars 

# terraform_apply:
#     stage: tf_apply 
#     before_script:
#       - cd dev 
#       - if ! ansible-galaxy list | grep -q 'satellite'; then ansible-galaxy install -r requirements.yml; fi 
#     script: 
#       - terraform apply --var-file=/opt/infrastructure-linux/terraform/dev/.infra.tfvars --auto-approve
#       - cp terraform.state /opt/infrastructure-linux/terraform/dev/
#       - cp main.tf /opt/infrastructure-linux/terraform/dev/
#       - cp params.yml /opt/infrastructure-linux/terraform/dev/
#     when: manual 
