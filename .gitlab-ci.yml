stages:
  - parse_trigger #dummy stage to trigger the pipe
  - parse_convert_to_csv 
  - parse_convert_to_yml 
  - ansible
  - tf_check
  - tf_apply
  
first_job:
    stage: parse_trigger 
    script:
      - echo "Detected useful changes, starting ..."      
    tags:
      - shell
    rules:
    - changes:
        - "dev/vmdefs.xlsx" #if change happens here, the pipeline is triggered 
      
parse_job_1:
    before_script:
      - cd dev
      - https_proxy=172.22.108.7:80 pip3 install -r requirements.txt 
    stage: parse_convert_to_csv 
    script:
      - python3 convert_to_csv.py
    artifacts:
      untracked: true
      paths:
      - dev/vmdefs.csv 
    tags:
      - shell
    
parse_job_2:
    stage: parse_convert_to_yml
    dependencies:
      - parse_job_1
    before_script:
      - cd dev
      - cat vmdefs.csv
    script:
      - python3 convert_to_yml.py vmdefs.csv
    artifacts:
      untracked: true      
      paths:
      - dev/params.yml
    tags:
      - shell
    
    # needs:
    #   - parse_job_1
    
      
ansible_playbook_generation:
    stage: ansible 
    script:
      - cat dev/params.yml
      - cd dev 
      - ansible-playbook main.yml 
    artifacts:
      paths:
      - dev/main.tf 

terraform_check:
    stage: tf_check
    script:
      - cd dev
      - cat main.tf 
      - terraform validate
      - terraform plan --var-file=/opt/infrastructure-linux/terraform/dev/.infra.tfvars 

terraform_apply:
    stage: tf_apply 
    script: 
      - cd dev 
      - terraform apply --var-file=/opt/infrastructure-linux/terraform/dev/.infra.tfvars --auto-approve
    when: manual 