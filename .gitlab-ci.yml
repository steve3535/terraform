stages:
  - parsing 
  - generate_playbook #generates main.tf based on previous stage yml output file
  - terraform
  
parse_job_0:
    stage: parsing 
    script:
      - echo "Detected useful changes, starting ..."      
    tags:
      - shell
    rules:
    - changes:
        - "vmdefs.xlsx" #if change happens here, the pipeline is triggered 
      
parse_job_1:
    before_script:
      - https_proxy=172.22.108.7:80 pip3 install -r requirements.txt 
    stage: parsing 
    script:
      - python3 convert_to_csv.py vmdefs.xlsx
      - cp vmdefs.csv /opt/infrastructure/linux/terraform/
    artifacts:
      untracked: true
      paths:
      - vmdefs.csv 
    tags:
      - shell
    
parse_job_2:
    stage: parsing
    dependencies:
      - parse_job_1
    before_script:
      #- cat vmdefs.csv
    script:
      - python3 convert_to_yml.py vmdefs.csv
      - cp params.yml /opt/infrastructure/linux/terraform/
    artifacts:
      untracked: true      
      paths:
      - params.yml
    tags:
      - shell
         
generate_playbook:
    stage: generate_playbook
    script:
      #- cat params.yml 
      - ansible-playbook main.yml 
      - cp main.tf /opt/infrastructure/linux/terraform/
    artifacts:
      paths:
      - main.tf 

tf_check:
    stage: terraform
    script:
      - terraform validate
      - terraform plan -var-file=/opt/infrastructure/linux/terraform/creds/.infra.tfvars 

tf_apply:
     stage: terraform
     before_script:
       - https_proxy=172.22.108.7:80
       - if ! ansible-galaxy list | grep -q 'satellite'; then ansible-galaxy install -r requirements.yml; fi 
     script: 
       - terraform apply -var-file=/opt/infrastructure/linux/terraform/creds/.infra.tfvars --auto-approve
       - cp terraform.tfstate /opt/infrastructure/linux/terraform/
     when: manual 